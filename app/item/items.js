"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Sqlite = require("nativescript-sqlite");
var Inventory = /** @class */ (function () {
    function Inventory() {
        var _this = this;
        if (!this.isInstantiated) {
            (new Sqlite("inventory.db")).then(function (db) {
                db.execSQL("CREATE TABLE IF NOT EXISTS items " +
                    "(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, franchise TEXT, series TEXT, productImage TEXT, packagingImage TEXT, toyLine TEXT, releaseDate TEXT, toyQuality TEXT)")
                    .then(function (id) {
                    _this.db = db;
                    _this.isInstantiated = true;
                }, function (error) {
                    console.log("CREATE TABLE ERROR", error);
                });
            }, function (error) {
                console.log("OPEN DB ERROR", error);
            });
        }
    }
    Inventory.prototype.insert = function (data) {
        return this.db.
            execSQL("INSERT INTO items (name, franchise, series, productImage, packagingImage, toyLine, releaseDate, toyQuality ) " +
            "VALUES (?, ?, ?, ?, ?, ?, ?, ?)", [data.name, data.franchise, data.series, data.productImage, data.packagingImage, data.toyLine, data.releaseDate, data.toyQuality]);
    };
    Inventory.prototype.delete = function (id) {
        return this.db.
            execSQL("DELETE FROM items WHERE id = " + id);
    };
    Inventory.prototype.getById = function (id) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.db.all("SELECT * FROM items where id = " + id).then(function (rows) {
                var item = {
                    "id": rows[0][0],
                    "name": rows[0][1],
                    "franchise": rows[0][2],
                    "series": rows[0][3],
                    "productImage": rows[0][4],
                    "packagingImage": rows[0][5],
                    "toyLine": rows[0][6],
                    "releaseDate": rows[0][7],
                    "toyQuality": rows[0][8]
                };
                resolve(item);
            }, function (error) {
                reject(error);
            });
        });
    };
    Inventory.prototype.fetch = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.db.all("SELECT * FROM items").then(function (rows) {
                var items = [];
                for (var row in rows) {
                    items.push({
                        "id": rows[row][0],
                        "name": rows[row][1],
                        "franchise": rows[row][2],
                        "series": rows[row][3],
                        "productImage": rows[row][4],
                        "packagingImage": rows[row][5],
                        "toyLine": rows[row][6],
                        "releaseDate": rows[row][7],
                        "toyQuality": rows[row][8]
                    });
                }
                resolve(items);
            }, function (error) {
                reject(error);
            });
        });
    };
    Inventory = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], Inventory);
    return Inventory;
}());
exports.Inventory = Inventory;
//# sourceMappingURL=data:application/json;base64,